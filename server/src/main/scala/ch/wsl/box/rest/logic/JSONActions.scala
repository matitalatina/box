package ch.wsl.box.rest.logic

import akka.stream.Materializer
import akka.stream.scaladsl.Source
import ch.wsl.box.jdbc
import ch.wsl.box.model.shared._
import io.circe._
import io.circe.syntax._
import scribe.Logging
import slick.basic.DatabasePublisher
import ch.wsl.box.jdbc.PostgresProfile
import slick.lifted.TableQuery
import ch.wsl.box.jdbc.PostgresProfile.api._
import slick.jdbc.{ResultSetConcurrency, ResultSetType}

import scala.concurrent.{ExecutionContext, Future}

/**
  * Created by andre on 5/19/2017.
  */

class JSONViewActions[T <: ch.wsl.box.jdbc.PostgresProfile.api.Table[M],M <: Product](entity:TableQuery[T])(implicit encoder: Encoder[M], decoder: Decoder[M], ec:ExecutionContext) extends ViewActions[Json] {

  protected val dbActions = new DbActions[T,M](entity)

  implicit class JsonQueryBuilder(base:Query[T,M,Seq]) {

    import ch.wsl.box.rest.logic.EnhancedTable._ //import col select


    def select(fields: Seq[String])(implicit db:Database):DatabasePublisher[Seq[Option[Json]]] = {

      import slick.collection.heterogeneous._
      import slick.collection.heterogeneous.syntax._



      fields.size match {
        case 1 => db.stream(base.map { x => x.col("json"+fields(0)).rep.asInstanceOf[Rep[Option[Json]]] :: HNil }.result.withStatementParameters(rsType = ResultSetType.ForwardOnly, rsConcurrency = ResultSetConcurrency.ReadOnly, fetchSize = 0)).mapResult(_.toList.asInstanceOf[List[Option[Json]]])
        case 2 => db.stream(base.map { x => x.col("json"+fields(0)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(1)).rep.asInstanceOf[Rep[Option[Json]]] :: HNil }.result.withStatementParameters(rsType = ResultSetType.ForwardOnly, rsConcurrency = ResultSetConcurrency.ReadOnly, fetchSize = 0)).mapResult(_.toList.asInstanceOf[List[Option[Json]]])
        case 3 => db.stream(base.map { x => x.col("json"+fields(0)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(1)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(2)).rep.asInstanceOf[Rep[Option[Json]]] :: HNil }.result.withStatementParameters(rsType = ResultSetType.ForwardOnly, rsConcurrency = ResultSetConcurrency.ReadOnly, fetchSize = 0)).mapResult(_.toList.asInstanceOf[List[Option[Json]]])
        case 4 => db.stream(base.map { x => x.col("json"+fields(0)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(1)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(2)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(3)).rep.asInstanceOf[Rep[Option[Json]]] :: HNil }.result.withStatementParameters(rsType = ResultSetType.ForwardOnly, rsConcurrency = ResultSetConcurrency.ReadOnly, fetchSize = 0)).mapResult(_.toList.asInstanceOf[List[Option[Json]]])
        case 5 => db.stream(base.map { x => x.col("json"+fields(0)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(1)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(2)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(3)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(4)).rep.asInstanceOf[Rep[Option[Json]]] :: HNil }.result.withStatementParameters(rsType = ResultSetType.ForwardOnly, rsConcurrency = ResultSetConcurrency.ReadOnly, fetchSize = 0)).mapResult(_.toList.asInstanceOf[List[Option[Json]]])
        case 6 => db.stream(base.map { x => x.col("json"+fields(0)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(1)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(2)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(3)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(4)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(5)).rep.asInstanceOf[Rep[Option[Json]]] :: HNil }.result.withStatementParameters(rsType = ResultSetType.ForwardOnly, rsConcurrency = ResultSetConcurrency.ReadOnly, fetchSize = 0)).mapResult(_.toList.asInstanceOf[List[Option[Json]]])
        case 7 => db.stream(base.map { x => x.col("json"+fields(0)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(1)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(2)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(3)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(4)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(5)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(6)).rep.asInstanceOf[Rep[Option[Json]]] :: HNil }.result.withStatementParameters(rsType = ResultSetType.ForwardOnly, rsConcurrency = ResultSetConcurrency.ReadOnly, fetchSize = 0)).mapResult(_.toList.asInstanceOf[List[Option[Json]]])
        case 8 => db.stream(base.map { x => x.col("json"+fields(0)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(1)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(2)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(3)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(4)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(5)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(6)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(7)).rep.asInstanceOf[Rep[Option[Json]]] :: HNil }.result.withStatementParameters(rsType = ResultSetType.ForwardOnly, rsConcurrency = ResultSetConcurrency.ReadOnly, fetchSize = 0)).mapResult(_.toList.asInstanceOf[List[Option[Json]]])
        case 9 => db.stream(base.map { x => x.col("json"+fields(0)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(1)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(2)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(3)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(4)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(5)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(6)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(7)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(8)).rep.asInstanceOf[Rep[Option[Json]]] :: HNil }.result.withStatementParameters(rsType = ResultSetType.ForwardOnly, rsConcurrency = ResultSetConcurrency.ReadOnly, fetchSize = 0)).mapResult(_.toList.asInstanceOf[List[Option[Json]]])
        case 10 => db.stream(base.map { x => x.col("json"+fields(0)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(1)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(2)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(3)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(4)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(5)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(6)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(7)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(8)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(9)).rep.asInstanceOf[Rep[Option[Json]]] :: HNil }.result.withStatementParameters(rsType = ResultSetType.ForwardOnly, rsConcurrency = ResultSetConcurrency.ReadOnly, fetchSize = 0)).mapResult(_.toList.asInstanceOf[List[Option[Json]]])
        case 11 => db.stream(base.map { x => x.col("json"+fields(0)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(1)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(2)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(3)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(4)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(5)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(6)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(7)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(8)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(9)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(10)).rep.asInstanceOf[Rep[Option[Json]]] :: HNil }.result.withStatementParameters(rsType = ResultSetType.ForwardOnly, rsConcurrency = ResultSetConcurrency.ReadOnly, fetchSize = 0)).mapResult(_.toList.asInstanceOf[List[Option[Json]]])
        case 12 => db.stream(base.map { x => x.col("json"+fields(0)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(1)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(2)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(3)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(4)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(5)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(6)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(7)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(8)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(9)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(10)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(11)).rep.asInstanceOf[Rep[Option[Json]]] :: HNil }.result.withStatementParameters(rsType = ResultSetType.ForwardOnly, rsConcurrency = ResultSetConcurrency.ReadOnly, fetchSize = 0)).mapResult(_.toList.asInstanceOf[List[Option[Json]]])
        case 13 => db.stream(base.map { x => x.col("json"+fields(0)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(1)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(2)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(3)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(4)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(5)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(6)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(7)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(8)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(9)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(10)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(11)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(12)).rep.asInstanceOf[Rep[Option[Json]]] :: HNil }.result.withStatementParameters(rsType = ResultSetType.ForwardOnly, rsConcurrency = ResultSetConcurrency.ReadOnly, fetchSize = 0)).mapResult(_.toList.asInstanceOf[List[Option[Json]]])
        case 14 => db.stream(base.map { x => x.col("json"+fields(0)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(1)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(2)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(3)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(4)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(5)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(6)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(7)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(8)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(9)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(10)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(11)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(12)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(13)).rep.asInstanceOf[Rep[Option[Json]]] :: HNil }.result.withStatementParameters(rsType = ResultSetType.ForwardOnly, rsConcurrency = ResultSetConcurrency.ReadOnly, fetchSize = 0)).mapResult(_.toList.asInstanceOf[List[Option[Json]]])
        case 15 => db.stream(base.map { x => x.col("json"+fields(0)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(1)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(2)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(3)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(4)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(5)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(6)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(7)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(8)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(9)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(10)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(11)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(12)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(13)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(14)).rep.asInstanceOf[Rep[Option[Json]]] :: HNil }.result.withStatementParameters(rsType = ResultSetType.ForwardOnly, rsConcurrency = ResultSetConcurrency.ReadOnly, fetchSize = 0)).mapResult(_.toList.asInstanceOf[List[Option[Json]]])
        case 16 => db.stream(base.map { x => x.col("json"+fields(0)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(1)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(2)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(3)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(4)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(5)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(6)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(7)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(8)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(9)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(10)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(11)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(12)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(13)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(14)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(15)).rep.asInstanceOf[Rep[Option[Json]]] :: HNil }.result.withStatementParameters(rsType = ResultSetType.ForwardOnly, rsConcurrency = ResultSetConcurrency.ReadOnly, fetchSize = 0)).mapResult(_.toList.asInstanceOf[List[Option[Json]]])
        case 17 => db.stream(base.map { x => x.col("json"+fields(0)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(1)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(2)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(3)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(4)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(5)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(6)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(7)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(8)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(9)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(10)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(11)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(12)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(13)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(14)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(15)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(16)).rep.asInstanceOf[Rep[Option[Json]]] :: HNil }.result.withStatementParameters(rsType = ResultSetType.ForwardOnly, rsConcurrency = ResultSetConcurrency.ReadOnly, fetchSize = 0)).mapResult(_.toList.asInstanceOf[List[Option[Json]]])
        case 18 => db.stream(base.map { x => x.col("json"+fields(0)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(1)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(2)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(3)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(4)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(5)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(6)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(7)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(8)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(9)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(10)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(11)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(12)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(13)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(14)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(15)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(16)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(17)).rep.asInstanceOf[Rep[Option[Json]]] :: HNil }.result.withStatementParameters(rsType = ResultSetType.ForwardOnly, rsConcurrency = ResultSetConcurrency.ReadOnly, fetchSize = 0)).mapResult(_.toList.asInstanceOf[List[Option[Json]]])
        case 19 => db.stream(base.map { x => x.col("json"+fields(0)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(1)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(2)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(3)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(4)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(5)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(6)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(7)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(8)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(9)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(10)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(11)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(12)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(13)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(14)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(15)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(16)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(17)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(18)).rep.asInstanceOf[Rep[Option[Json]]] :: HNil }.result.withStatementParameters(rsType = ResultSetType.ForwardOnly, rsConcurrency = ResultSetConcurrency.ReadOnly, fetchSize = 0)).mapResult(_.toList.asInstanceOf[List[Option[Json]]])
        case 20 => db.stream(base.map { x => x.col("json"+fields(0)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(1)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(2)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(3)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(4)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(5)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(6)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(7)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(8)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(9)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(10)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(11)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(12)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(13)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(14)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(15)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(16)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(17)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(18)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(19)).rep.asInstanceOf[Rep[Option[Json]]] :: HNil }.result.withStatementParameters(rsType = ResultSetType.ForwardOnly, rsConcurrency = ResultSetConcurrency.ReadOnly, fetchSize = 0)).mapResult(_.toList.asInstanceOf[List[Option[Json]]])
        case 21 => db.stream(base.map { x => x.col("json"+fields(0)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(1)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(2)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(3)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(4)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(5)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(6)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(7)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(8)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(9)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(10)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(11)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(12)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(13)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(14)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(15)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(16)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(17)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(18)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(19)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(20)).rep.asInstanceOf[Rep[Option[Json]]] :: HNil }.result.withStatementParameters(rsType = ResultSetType.ForwardOnly, rsConcurrency = ResultSetConcurrency.ReadOnly, fetchSize = 0)).mapResult(_.toList.asInstanceOf[List[Option[Json]]])
        case 22 => db.stream(base.map { x => x.col("json"+fields(0)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(1)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(2)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(3)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(4)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(5)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(6)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(7)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(8)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(9)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(10)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(11)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(12)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(13)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(14)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(15)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(16)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(17)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(18)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(19)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(20)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(21)).rep.asInstanceOf[Rep[Option[Json]]] :: HNil }.result.withStatementParameters(rsType = ResultSetType.ForwardOnly, rsConcurrency = ResultSetConcurrency.ReadOnly, fetchSize = 0)).mapResult(_.toList.asInstanceOf[List[Option[Json]]])
        case 23 => db.stream(base.map { x => x.col("json"+fields(0)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(1)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(2)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(3)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(4)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(5)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(6)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(7)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(8)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(9)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(10)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(11)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(12)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(13)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(14)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(15)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(16)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(17)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(18)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(19)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(20)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(21)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(22)).rep.asInstanceOf[Rep[Option[Json]]] :: HNil }.result.withStatementParameters(rsType = ResultSetType.ForwardOnly, rsConcurrency = ResultSetConcurrency.ReadOnly, fetchSize = 0)).mapResult(_.toList.asInstanceOf[List[Option[Json]]])
        case 24 => db.stream(base.map { x => x.col("json"+fields(0)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(1)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(2)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(3)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(4)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(5)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(6)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(7)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(8)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(9)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(10)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(11)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(12)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(13)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(14)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(15)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(16)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(17)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(18)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(19)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(20)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(21)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(22)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(23)).rep.asInstanceOf[Rep[Option[Json]]] :: HNil }.result.withStatementParameters(rsType = ResultSetType.ForwardOnly, rsConcurrency = ResultSetConcurrency.ReadOnly, fetchSize = 0)).mapResult(_.toList.asInstanceOf[List[Option[Json]]])
        case 25 => db.stream(base.map { x => x.col("json"+fields(0)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(1)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(2)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(3)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(4)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(5)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(6)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(7)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(8)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(9)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(10)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(11)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(12)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(13)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(14)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(15)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(16)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(17)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(18)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(19)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(20)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(21)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(22)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(23)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(24)).rep.asInstanceOf[Rep[Option[Json]]] :: HNil }.result.withStatementParameters(rsType = ResultSetType.ForwardOnly, rsConcurrency = ResultSetConcurrency.ReadOnly, fetchSize = 0)).mapResult(_.toList.asInstanceOf[List[Option[Json]]])
        case 26 => db.stream(base.map { x => x.col("json"+fields(0)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(1)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(2)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(3)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(4)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(5)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(6)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(7)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(8)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(9)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(10)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(11)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(12)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(13)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(14)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(15)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(16)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(17)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(18)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(19)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(20)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(21)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(22)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(23)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(24)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(25)).rep.asInstanceOf[Rep[Option[Json]]] :: HNil }.result.withStatementParameters(rsType = ResultSetType.ForwardOnly, rsConcurrency = ResultSetConcurrency.ReadOnly, fetchSize = 0)).mapResult(_.toList.asInstanceOf[List[Option[Json]]])
        case 27 => db.stream(base.map { x => x.col("json"+fields(0)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(1)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(2)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(3)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(4)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(5)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(6)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(7)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(8)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(9)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(10)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(11)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(12)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(13)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(14)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(15)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(16)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(17)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(18)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(19)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(20)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(21)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(22)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(23)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(24)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(25)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(26)).rep.asInstanceOf[Rep[Option[Json]]] :: HNil }.result.withStatementParameters(rsType = ResultSetType.ForwardOnly, rsConcurrency = ResultSetConcurrency.ReadOnly, fetchSize = 0)).mapResult(_.toList.asInstanceOf[List[Option[Json]]])
        case 28 => db.stream(base.map { x => x.col("json"+fields(0)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(1)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(2)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(3)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(4)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(5)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(6)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(7)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(8)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(9)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(10)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(11)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(12)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(13)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(14)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(15)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(16)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(17)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(18)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(19)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(20)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(21)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(22)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(23)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(24)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(25)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(26)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(27)).rep.asInstanceOf[Rep[Option[Json]]] :: HNil }.result.withStatementParameters(rsType = ResultSetType.ForwardOnly, rsConcurrency = ResultSetConcurrency.ReadOnly, fetchSize = 0)).mapResult(_.toList.asInstanceOf[List[Option[Json]]])
        case 29 => db.stream(base.map { x => x.col("json"+fields(0)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(1)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(2)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(3)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(4)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(5)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(6)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(7)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(8)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(9)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(10)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(11)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(12)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(13)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(14)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(15)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(16)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(17)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(18)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(19)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(20)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(21)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(22)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(23)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(24)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(25)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(26)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(27)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(28)).rep.asInstanceOf[Rep[Option[Json]]] :: HNil }.result.withStatementParameters(rsType = ResultSetType.ForwardOnly, rsConcurrency = ResultSetConcurrency.ReadOnly, fetchSize = 0)).mapResult(_.toList.asInstanceOf[List[Option[Json]]])
        case 30 => db.stream(base.map { x => x.col("json"+fields(0)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(1)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(2)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(3)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(4)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(5)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(6)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(7)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(8)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(9)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(10)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(11)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(12)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(13)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(14)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(15)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(16)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(17)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(18)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(19)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(20)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(21)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(22)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(23)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(24)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(25)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(26)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(27)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(28)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(29)).rep.asInstanceOf[Rep[Option[Json]]] :: HNil }.result.withStatementParameters(rsType = ResultSetType.ForwardOnly, rsConcurrency = ResultSetConcurrency.ReadOnly, fetchSize = 0)).mapResult(_.toList.asInstanceOf[List[Option[Json]]])
        case 31 => db.stream(base.map { x => x.col("json"+fields(0)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(1)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(2)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(3)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(4)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(5)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(6)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(7)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(8)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(9)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(10)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(11)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(12)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(13)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(14)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(15)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(16)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(17)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(18)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(19)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(20)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(21)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(22)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(23)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(24)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(25)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(26)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(27)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(28)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(29)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(30)).rep.asInstanceOf[Rep[Option[Json]]] :: HNil }.result.withStatementParameters(rsType = ResultSetType.ForwardOnly, rsConcurrency = ResultSetConcurrency.ReadOnly, fetchSize = 0)).mapResult(_.toList.asInstanceOf[List[Option[Json]]])
        case 32 => db.stream(base.map { x => x.col("json"+fields(0)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(1)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(2)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(3)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(4)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(5)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(6)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(7)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(8)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(9)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(10)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(11)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(12)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(13)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(14)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(15)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(16)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(17)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(18)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(19)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(20)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(21)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(22)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(23)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(24)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(25)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(26)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(27)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(28)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(29)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(30)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(31)).rep.asInstanceOf[Rep[Option[Json]]] :: HNil }.result.withStatementParameters(rsType = ResultSetType.ForwardOnly, rsConcurrency = ResultSetConcurrency.ReadOnly, fetchSize = 0)).mapResult(_.toList.asInstanceOf[List[Option[Json]]])
        case 33 => db.stream(base.map { x => x.col("json"+fields(0)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(1)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(2)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(3)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(4)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(5)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(6)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(7)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(8)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(9)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(10)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(11)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(12)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(13)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(14)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(15)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(16)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(17)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(18)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(19)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(20)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(21)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(22)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(23)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(24)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(25)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(26)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(27)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(28)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(29)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(30)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(31)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(32)).rep.asInstanceOf[Rep[Option[Json]]] :: HNil }.result.withStatementParameters(rsType = ResultSetType.ForwardOnly, rsConcurrency = ResultSetConcurrency.ReadOnly, fetchSize = 0)).mapResult(_.toList.asInstanceOf[List[Option[Json]]])
        case 34 => db.stream(base.map { x => x.col("json"+fields(0)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(1)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(2)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(3)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(4)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(5)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(6)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(7)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(8)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(9)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(10)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(11)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(12)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(13)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(14)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(15)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(16)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(17)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(18)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(19)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(20)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(21)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(22)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(23)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(24)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(25)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(26)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(27)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(28)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(29)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(30)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(31)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(32)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(33)).rep.asInstanceOf[Rep[Option[Json]]] :: HNil }.result.withStatementParameters(rsType = ResultSetType.ForwardOnly, rsConcurrency = ResultSetConcurrency.ReadOnly, fetchSize = 0)).mapResult(_.toList.asInstanceOf[List[Option[Json]]])
        case 35 => db.stream(base.map { x => x.col("json"+fields(0)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(1)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(2)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(3)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(4)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(5)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(6)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(7)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(8)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(9)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(10)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(11)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(12)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(13)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(14)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(15)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(16)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(17)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(18)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(19)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(20)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(21)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(22)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(23)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(24)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(25)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(26)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(27)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(28)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(29)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(30)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(31)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(32)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(33)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(34)).rep.asInstanceOf[Rep[Option[Json]]] :: HNil }.result.withStatementParameters(rsType = ResultSetType.ForwardOnly, rsConcurrency = ResultSetConcurrency.ReadOnly, fetchSize = 0)).mapResult(_.toList.asInstanceOf[List[Option[Json]]])
        case 36 => db.stream(base.map { x => x.col("json"+fields(0)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(1)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(2)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(3)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(4)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(5)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(6)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(7)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(8)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(9)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(10)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(11)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(12)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(13)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(14)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(15)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(16)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(17)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(18)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(19)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(20)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(21)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(22)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(23)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(24)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(25)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(26)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(27)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(28)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(29)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(30)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(31)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(32)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(33)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(34)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(35)).rep.asInstanceOf[Rep[Option[Json]]] :: HNil }.result.withStatementParameters(rsType = ResultSetType.ForwardOnly, rsConcurrency = ResultSetConcurrency.ReadOnly, fetchSize = 0)).mapResult(_.toList.asInstanceOf[List[Option[Json]]])
        case 37 => db.stream(base.map { x => x.col("json"+fields(0)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(1)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(2)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(3)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(4)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(5)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(6)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(7)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(8)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(9)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(10)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(11)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(12)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(13)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(14)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(15)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(16)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(17)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(18)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(19)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(20)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(21)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(22)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(23)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(24)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(25)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(26)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(27)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(28)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(29)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(30)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(31)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(32)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(33)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(34)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(35)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(36)).rep.asInstanceOf[Rep[Option[Json]]] :: HNil }.result.withStatementParameters(rsType = ResultSetType.ForwardOnly, rsConcurrency = ResultSetConcurrency.ReadOnly, fetchSize = 0)).mapResult(_.toList.asInstanceOf[List[Option[Json]]])
        case 38 => db.stream(base.map { x => x.col("json"+fields(0)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(1)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(2)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(3)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(4)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(5)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(6)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(7)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(8)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(9)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(10)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(11)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(12)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(13)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(14)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(15)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(16)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(17)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(18)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(19)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(20)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(21)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(22)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(23)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(24)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(25)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(26)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(27)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(28)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(29)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(30)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(31)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(32)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(33)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(34)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(35)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(36)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(37)).rep.asInstanceOf[Rep[Option[Json]]] :: HNil }.result.withStatementParameters(rsType = ResultSetType.ForwardOnly, rsConcurrency = ResultSetConcurrency.ReadOnly, fetchSize = 0)).mapResult(_.toList.asInstanceOf[List[Option[Json]]])
        case 39 => db.stream(base.map { x => x.col("json"+fields(0)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(1)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(2)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(3)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(4)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(5)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(6)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(7)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(8)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(9)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(10)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(11)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(12)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(13)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(14)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(15)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(16)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(17)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(18)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(19)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(20)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(21)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(22)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(23)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(24)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(25)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(26)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(27)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(28)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(29)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(30)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(31)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(32)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(33)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(34)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(35)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(36)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(37)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(38)).rep.asInstanceOf[Rep[Option[Json]]] :: HNil }.result.withStatementParameters(rsType = ResultSetType.ForwardOnly, rsConcurrency = ResultSetConcurrency.ReadOnly, fetchSize = 0)).mapResult(_.toList.asInstanceOf[List[Option[Json]]])
        case 40 => db.stream(base.map { x => x.col("json"+fields(0)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(1)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(2)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(3)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(4)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(5)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(6)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(7)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(8)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(9)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(10)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(11)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(12)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(13)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(14)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(15)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(16)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(17)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(18)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(19)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(20)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(21)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(22)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(23)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(24)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(25)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(26)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(27)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(28)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(29)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(30)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(31)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(32)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(33)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(34)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(35)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(36)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(37)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(38)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(39)).rep.asInstanceOf[Rep[Option[Json]]] :: HNil }.result.withStatementParameters(rsType = ResultSetType.ForwardOnly, rsConcurrency = ResultSetConcurrency.ReadOnly, fetchSize = 0)).mapResult(_.toList.asInstanceOf[List[Option[Json]]])
        case 41 => db.stream(base.map { x => x.col("json"+fields(0)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(1)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(2)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(3)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(4)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(5)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(6)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(7)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(8)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(9)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(10)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(11)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(12)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(13)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(14)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(15)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(16)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(17)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(18)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(19)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(20)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(21)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(22)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(23)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(24)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(25)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(26)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(27)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(28)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(29)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(30)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(31)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(32)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(33)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(34)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(35)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(36)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(37)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(38)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(39)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(40)).rep.asInstanceOf[Rep[Option[Json]]] :: HNil }.result.withStatementParameters(rsType = ResultSetType.ForwardOnly, rsConcurrency = ResultSetConcurrency.ReadOnly, fetchSize = 0)).mapResult(_.toList.asInstanceOf[List[Option[Json]]])
        case 42 => db.stream(base.map { x => x.col("json"+fields(0)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(1)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(2)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(3)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(4)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(5)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(6)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(7)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(8)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(9)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(10)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(11)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(12)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(13)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(14)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(15)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(16)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(17)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(18)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(19)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(20)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(21)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(22)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(23)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(24)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(25)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(26)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(27)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(28)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(29)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(30)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(31)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(32)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(33)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(34)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(35)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(36)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(37)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(38)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(39)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(40)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(41)).rep.asInstanceOf[Rep[Option[Json]]] :: HNil }.result.withStatementParameters(rsType = ResultSetType.ForwardOnly, rsConcurrency = ResultSetConcurrency.ReadOnly, fetchSize = 0)).mapResult(_.toList.asInstanceOf[List[Option[Json]]])
        case 43 => db.stream(base.map { x => x.col("json"+fields(0)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(1)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(2)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(3)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(4)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(5)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(6)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(7)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(8)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(9)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(10)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(11)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(12)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(13)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(14)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(15)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(16)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(17)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(18)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(19)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(20)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(21)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(22)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(23)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(24)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(25)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(26)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(27)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(28)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(29)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(30)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(31)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(32)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(33)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(34)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(35)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(36)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(37)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(38)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(39)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(40)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(41)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(42)).rep.asInstanceOf[Rep[Option[Json]]] :: HNil }.result.withStatementParameters(rsType = ResultSetType.ForwardOnly, rsConcurrency = ResultSetConcurrency.ReadOnly, fetchSize = 0)).mapResult(_.toList.asInstanceOf[List[Option[Json]]])
        case 44 => db.stream(base.map { x => x.col("json"+fields(0)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(1)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(2)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(3)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(4)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(5)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(6)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(7)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(8)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(9)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(10)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(11)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(12)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(13)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(14)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(15)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(16)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(17)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(18)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(19)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(20)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(21)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(22)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(23)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(24)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(25)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(26)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(27)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(28)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(29)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(30)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(31)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(32)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(33)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(34)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(35)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(36)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(37)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(38)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(39)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(40)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(41)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(42)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(43)).rep.asInstanceOf[Rep[Option[Json]]] :: HNil }.result.withStatementParameters(rsType = ResultSetType.ForwardOnly, rsConcurrency = ResultSetConcurrency.ReadOnly, fetchSize = 0)).mapResult(_.toList.asInstanceOf[List[Option[Json]]])
        case 45 => db.stream(base.map { x => x.col("json"+fields(0)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(1)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(2)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(3)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(4)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(5)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(6)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(7)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(8)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(9)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(10)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(11)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(12)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(13)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(14)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(15)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(16)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(17)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(18)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(19)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(20)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(21)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(22)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(23)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(24)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(25)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(26)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(27)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(28)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(29)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(30)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(31)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(32)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(33)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(34)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(35)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(36)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(37)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(38)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(39)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(40)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(41)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(42)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(43)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(44)).rep.asInstanceOf[Rep[Option[Json]]] :: HNil }.result.withStatementParameters(rsType = ResultSetType.ForwardOnly, rsConcurrency = ResultSetConcurrency.ReadOnly, fetchSize = 0)).mapResult(_.toList.asInstanceOf[List[Option[Json]]])
        case 46 => db.stream(base.map { x => x.col("json"+fields(0)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(1)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(2)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(3)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(4)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(5)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(6)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(7)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(8)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(9)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(10)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(11)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(12)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(13)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(14)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(15)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(16)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(17)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(18)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(19)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(20)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(21)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(22)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(23)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(24)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(25)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(26)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(27)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(28)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(29)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(30)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(31)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(32)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(33)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(34)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(35)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(36)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(37)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(38)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(39)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(40)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(41)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(42)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(43)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(44)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(45)).rep.asInstanceOf[Rep[Option[Json]]] :: HNil }.result.withStatementParameters(rsType = ResultSetType.ForwardOnly, rsConcurrency = ResultSetConcurrency.ReadOnly, fetchSize = 0)).mapResult(_.toList.asInstanceOf[List[Option[Json]]])
        case 47 => db.stream(base.map { x => x.col("json"+fields(0)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(1)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(2)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(3)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(4)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(5)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(6)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(7)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(8)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(9)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(10)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(11)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(12)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(13)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(14)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(15)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(16)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(17)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(18)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(19)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(20)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(21)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(22)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(23)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(24)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(25)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(26)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(27)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(28)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(29)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(30)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(31)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(32)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(33)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(34)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(35)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(36)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(37)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(38)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(39)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(40)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(41)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(42)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(43)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(44)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(45)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(46)).rep.asInstanceOf[Rep[Option[Json]]] :: HNil }.result.withStatementParameters(rsType = ResultSetType.ForwardOnly, rsConcurrency = ResultSetConcurrency.ReadOnly, fetchSize = 0)).mapResult(_.toList.asInstanceOf[List[Option[Json]]])
        case 48 => db.stream(base.map { x => x.col("json"+fields(0)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(1)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(2)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(3)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(4)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(5)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(6)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(7)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(8)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(9)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(10)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(11)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(12)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(13)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(14)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(15)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(16)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(17)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(18)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(19)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(20)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(21)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(22)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(23)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(24)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(25)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(26)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(27)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(28)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(29)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(30)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(31)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(32)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(33)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(34)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(35)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(36)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(37)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(38)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(39)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(40)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(41)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(42)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(43)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(44)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(45)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(46)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(47)).rep.asInstanceOf[Rep[Option[Json]]] :: HNil }.result.withStatementParameters(rsType = ResultSetType.ForwardOnly, rsConcurrency = ResultSetConcurrency.ReadOnly, fetchSize = 0)).mapResult(_.toList.asInstanceOf[List[Option[Json]]])
        case 49 => db.stream(base.map { x => x.col("json"+fields(0)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(1)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(2)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(3)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(4)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(5)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(6)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(7)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(8)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(9)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(10)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(11)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(12)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(13)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(14)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(15)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(16)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(17)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(18)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(19)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(20)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(21)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(22)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(23)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(24)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(25)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(26)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(27)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(28)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(29)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(30)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(31)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(32)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(33)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(34)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(35)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(36)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(37)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(38)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(39)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(40)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(41)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(42)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(43)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(44)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(45)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(46)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(47)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(48)).rep.asInstanceOf[Rep[Option[Json]]] :: HNil }.result.withStatementParameters(rsType = ResultSetType.ForwardOnly, rsConcurrency = ResultSetConcurrency.ReadOnly, fetchSize = 0)).mapResult(_.toList.asInstanceOf[List[Option[Json]]])
        case 50 => db.stream(base.map { x => x.col("json"+fields(0)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(1)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(2)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(3)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(4)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(5)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(6)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(7)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(8)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(9)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(10)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(11)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(12)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(13)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(14)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(15)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(16)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(17)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(18)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(19)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(20)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(21)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(22)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(23)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(24)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(25)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(26)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(27)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(28)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(29)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(30)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(31)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(32)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(33)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(34)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(35)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(36)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(37)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(38)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(39)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(40)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(41)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(42)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(43)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(44)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(45)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(46)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(47)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(48)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(49)).rep.asInstanceOf[Rep[Option[Json]]] :: HNil }.result.withStatementParameters(rsType = ResultSetType.ForwardOnly, rsConcurrency = ResultSetConcurrency.ReadOnly, fetchSize = 0)).mapResult(_.toList.asInstanceOf[List[Option[Json]]])
        case 51 => db.stream(base.map { x => x.col("json"+fields(0)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(1)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(2)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(3)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(4)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(5)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(6)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(7)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(8)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(9)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(10)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(11)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(12)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(13)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(14)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(15)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(16)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(17)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(18)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(19)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(20)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(21)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(22)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(23)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(24)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(25)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(26)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(27)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(28)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(29)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(30)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(31)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(32)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(33)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(34)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(35)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(36)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(37)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(38)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(39)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(40)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(41)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(42)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(43)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(44)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(45)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(46)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(47)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(48)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(49)).rep.asInstanceOf[Rep[Option[Json]]] :: x.col("json"+fields(50)).rep.asInstanceOf[Rep[Option[Json]]] :: HNil }.result.withStatementParameters(rsType = ResultSetType.ForwardOnly, rsConcurrency = ResultSetConcurrency.ReadOnly, fetchSize = 0)).mapResult(_.toList.asInstanceOf[List[Option[Json]]])
      }
      



    }


  }


  override def findStreamed(query: JSONQuery=JSONQuery.empty)(implicit db:Database): DatabasePublisher[Json] = {

    import dbActions._

    val q = entity.where(query.filter).sort(query.sort).page(query.paging)
    JsonQueryBuilder(q).select(query.fields.get).mapResult{result =>
      query.fields.get.zip(result).toMap.asJson

    }

    //dbActions.findStreamed(query).mapResult(_.asJson)

  }


  override def find(query: JSONQuery)(implicit db: jdbc.PostgresProfile.api.Database, mat: Materializer): DBIO[Seq[Json]] = dbActions.find(query).map(_.map(_.asJson))

  override def getById(id: JSONID=JSONID.empty)(implicit db:Database):DBIO[Option[Json]] = dbActions.getById(id).map(_.map(_.asJson))

  override def count()(implicit db:Database) = dbActions.count()

  override def ids(query:JSONQuery)(implicit db:Database, mat:Materializer):DBIO[IDs] = {
    for{
      data <- dbActions.find(query)
      keys <- dbActions.keys()   // JSONMetadataFactory.keysOf(table.baseTableRow.tableName)
      n <- dbActions.count(query)
    } yield {

      val last = query.paging match {
        case None => true
        case Some(paging) =>  (paging.currentPage * paging.pageLength) >= n
      }
      import ch.wsl.box.shared.utils.JSONUtils._
      IDs(
        last,
        query.paging.map(_.currentPage).getOrElse(1),
        data.map{_.asJson.ID(keys).asString},
        n
      )
    }
  }

}

case class JSONTableActions[T <: ch.wsl.box.jdbc.PostgresProfile.api.Table[M],M <: Product](table:TableQuery[T])(implicit encoder: Encoder[M], decoder: Decoder[M], ec:ExecutionContext) extends JSONViewActions[T,M](table) with TableActions[Json] with Logging {



  override def update(id:JSONID, json: Json)(implicit db: _root_.ch.wsl.box.jdbc.PostgresProfile.api.Database):DBIO[Int] = {
    for{
      current <- getById(id) //retrieve values in db
      merged  = current.get.deepMerge(json) //merge old and new json
      updatedCount <- dbActions.update(id, toM(merged))
    } yield updatedCount
  }

  override def updateIfNeeded(id:JSONID, json: Json)(implicit db: _root_.ch.wsl.box.jdbc.PostgresProfile.api.Database):DBIO[Int] = {
    for{
      current <- getById(id) //retrieve values in db
      merged  = current.get.deepMerge(json) //merge old and new json
      updateCount <- if (toM(current.get) != toM(merged)) {  //check if same
        dbActions.update(id, toM(merged))            //could also use updateIfNeeded and no check
      } else DBIO.successful(0)
    } yield {
      updateCount
    }
  }

  override def insert(json: Json)(implicit db:Database):DBIO[JSONID] = dbActions.insert(toM(json))



  override def upsertIfNeeded(id:JSONID, json: Json)(implicit db: Database):DBIO[JSONID] = {
    for{
      current <- getById(id) //retrieve values in db
      result <- if (current.isDefined){   //if exists, check if we have to skip the update (if row is the same)
        val merged  = current.get.deepMerge(json) //merge old and new json
        if (toM(current.get) != toM(merged)) {
          dbActions.update(id, toM(merged)).map(_ => id)        //could also use updateIfNeeded and no check
        } else DBIO.successful(id)
      } else{
        insert(json)
      }
    } yield {
      result
    }
  }

  override def delete(id: JSONID)(implicit db: Database):DBIO[Int] = dbActions.delete(id)

  protected def toM(json: Json):M =json.as[M].fold(
      { fail =>
        throw new JSONDecoderException(fail,json)
      },
      { x => x }
  )
}

case class JSONDecoderException(failure: DecodingFailure, original:Json) extends Throwable
